<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!-- MyBatis Generator 代码生成器配置 -->
<!--
    所有子元素及子元素的子元素均有严格顺序
    <properties> -> <classPathEntry> -> <context>(必须)
-->
<generatorConfiguration>
    <!--
        可以用于加载配置项或者配置文件，在整个配置文件中就可以使用 ${propertyKey} 的方式来引用配置项
            1. resource：配置资源加载地址，MBG 从 classpath 开始寻找文件，比如 `com/folder/generatorConfig.properties`
            2. url：配置资源加载地址，使用 URL 的方式，比如 `file://C:/folder/generatorConfig.properties`
            注意，两个属性只能选址一个
        另外，如果使用了 mybatis-generator-maven-plugin，那么在 pom.xml 中定义的 properties 都可以直接在 generatorConfig.xml 中使用
    -->
    <properties resource="generator/generator.properties"/>

    <!--
        MBG 执行的时候，需要额外加载的依赖包
            location：指明加载 jar/zip 包的全路径（可在 Maven 插件中配置）
        <classPathEntry location="D:/market-dao.jar"/>
    -->

    <!--
          MBG 的运行环境
              id：必选，上下文 id，用于在生成错误时提示
              defaultModelType：指定生成对象的样式
                  1. conditional：默认值，类似 hierarchical，若主键中只有一个字段，则合并到实体类中
                  2. flat：所有内容（主键，BLOB）等全部生成在一个对象中
                  3. hierarchical：主键生成一个 XXKey 对象，BLOB 等单独生成一个对象，其他简单属性在一个对象中
              targetRuntime：
                  1. MyBatis3：默认的值，生成基于 MyBatis3.x 以上版本的内容，包括 XXXBySample
                  2. MyBatis3Simple：类似 MyBatis3，只是不生成 XXXBySample
          introspectedColumnImpl：指定扩展 `org.mybatis.generator.api.IntrospectedColumn` 该类的实现类
    -->
    <context id="demo" defaultModelType="flat" targetRuntime="tk.mybatis.mapper.generator.TkMyBatis3SimpleImpl">
        <!--
            自动识别数据库关键字，默认 false，如果设置为 true，根据 SqlReservedWords 中定义的关键字列表
            一般保留默认值，遇到数据库关键字（Java关键字），使用 columnOverride 覆盖
            <property name="autoDelimitKeywords" value="false"/>
        -->
        <!--
            生成的 Java 文件的编码，默认与项目一致
        -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!--
            格式化 Java 文件的工具类
            <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        -->
        <!--
            格式化 XML 文件的工具类
            <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        -->

        <!-- 生成实体类中的序列化属性 -->
        <plugin type="com.github.trang.mybatis.generator.plugins.SerializablePlugin">
            <property name="suppressJavaInterface" value="false"/>
        </plugin>

        <!-- 通用 Mapper 插件 -->
        <plugin type="com.github.trang.mybatis.generator.plugins.MapperPlugin">
            <!-- 通用 Mapper 接口 -->
            <property name="mappers" value="${base.mapper}"/>
            <!-- 是否支持 Lombok，默认值：none -->
            <property name="lombok" value="${lombok.type}"/>
            <!-- 数据库表名是否区分大小写，默认值：false -->
            <property name="caseSensitive" value="false"/>
            <!-- 是否强制生成 @Table 和 @Column 注解，默认值：false -->
            <property name="forceAnnotation" value="${force.annotation}"/>
        </plugin>

        <!-- 生成实体类中的 toString() 方法 -->
        <plugin type="com.github.trang.mybatis.generator.plugins.GuavaToStringPlugin"/>

        <!-- 生成 Mapper.xml 文件的 BaseColumns -->
        <plugin type="com.github.trang.mybatis.generator.plugins.MapperSqlMapConfigPlugin"/>

        <!-- 自动生成 Service 类 -->
        <plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">
            <property name="targetProject" value="${target.project.service}"/>
            <property name="targetPackage" value="${target.package.service}"/>
            <property name="templatePath" value="templates/service.ftl"/>
            <property name="templateFormatter" value="tk.mybatis.mapper.generator.formatter.FreemarkerTemplateFormatter"/>
            <property name="mapperSuffix" value="Service"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.java"/>
        </plugin>

        <!-- 自动生成 ServiceImpl 类 -->
        <plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">
            <property name="targetProject" value="${target.project.service.impl}"/>
            <property name="targetPackage" value="${target.package.service.impl}"/>
            <property name="templatePath" value="templates/serviceImpl.ftl"/>
            <property name="templateFormatter" value="tk.mybatis.mapper.generator.formatter.FreemarkerTemplateFormatter"/>
            <property name="mapperSuffix" value="ServiceImpl"/>
            <property name="projectPackage" value="${project.package}"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.java"/>
        </plugin>

        <!-- 自动生成 Facade 类 -->
        <plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">
            <property name="targetProject" value="${target.project.facade}"/>
            <property name="targetPackage" value="${target.package.facade}"/>
            <property name="templatePath" value="templates/facade.ftl"/>
            <property name="templateFormatter" value="tk.mybatis.mapper.generator.formatter.FreemarkerTemplateFormatter"/>
            <property name="mapperSuffix" value="Facade"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.java"/>
        </plugin>

        <!-- 自动生成 FacadeImpl 类 -->
        <plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">
            <property name="targetProject" value="${target.project.facade.impl}"/>
            <property name="targetPackage" value="${target.package.facade.impl}"/>
            <property name="templatePath" value="templates/facadeImpl.ftl"/>
            <property name="templateFormatter" value="tk.mybatis.mapper.generator.formatter.FreemarkerTemplateFormatter"/>
            <property name="mapperSuffix" value="FacadeImpl"/>
            <property name="projectPackage" value="${project.package}"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.java"/>
        </plugin>

        <!-- 自动生成自定义 Mapper.xml -->
        <plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">
            <property name="targetProject" value="${target.project.manual.xml}"/>
            <property name="targetPackage" value="${target.package.manual.xml}"/>
            <property name="templatePath" value="templates/manualMapper.ftl"/>
            <property name="templateFormatter" value="tk.mybatis.mapper.generator.formatter.FreemarkerTemplateFormatter"/>
            <property name="mapperPackage" value="${target.package.mapper}"/>
            <property name="mapperSuffix" value="Mapper"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.xml"/>
        </plugin>

        <!-- 读取数据库表的注释，生成 Model 的注释，默认为 `com.github.trang.mybatis.generator.plugins.CommentGenerator` -->
        <!--<commentGenerator type="com.github.trang.mybatis.generator.plugins.CommentGenerator"/>-->

        <!-- 数据库连接配置 -->
        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.url}" userId="${jdbc.user}" password="${jdbc.password}"/>

        <!--
            Java 类型处理器
            用于处理 JdbcType 和 JavaType 的映射关系，默认使用 JavaTypeResolverDefaultImpl
            注意一点，默认会先尝试使用 Integer，Long，Short 等来对应 DECIMAL 和 NUMERIC 数据类型；
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用 BigDecimal 对应 DECIMAL 和 NUMERIC 数据类型
                false：默认,
                    scale>0 & length>18：使用 BigDecimal;
                    scale=0 & length[10,18]：使用 Long；
                    scale=0 & length[5,9]：使用 Integer；
                    scale=0 & length<5：使用 Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--
            Java Model 生成器，必填
            负责：1，key类（见 context 的 defaultModelType）；2，java类；3，查询类
            targetPackage：生成的类要放的包，真实的包受 enableSubPackages 属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <javaModelGenerator targetPackage="${target.package.model}" targetProject="${target.project.model}">
            <!-- 默认使用 setter 方式入参，为 true 则构造方法入参 -->
            <property name="constructorBased" value="false"/>
            <!-- 为 true 则根据 catalog 和 schema 生成子包 -->
            <property name="enableSubPackages" value="false"/>
            <!-- 为 true 则只能使用构造方法入参 -->
            <property name="immutable" value="false"/>
            <!--
                所有 Model 的父类，MBG 不会覆盖与父类中完全匹配的属性
                匹配规则：
                    1，属性名完全相同
                    2，属性类型完全相同
                    3，getter、setter 方法完全相同
            -->
            <!--<property name="rootClass" value="${root.class.path}"/>-->
            <!--
                为 true 则生成类似代码
                this.username = username == null ? null : username.trim();
            -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 设置生成的 XML 文件，属性与 javaModelGenerator 一致 -->
        <sqlMapGenerator targetPackage="${target.package.xml}" targetProject="${target.project.xml}"/>

        <!--
            设置生成的 DAO 类
            type：
                1，ANNOTATEDMAPPER：基于注解的 Mapper 接口，没有 XML 文件
                2，MIXEDMAPPER：XML 与注解混合（SqlProvider 注解方法会被 XML 替代）
                3，XMLMAPPER：所有方法均生成在 XML 文件中
            MyBatis3Simple没有MIXEDMAPPER
        -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${target.package.mapper}" targetProject="${target.project.mapper}"/>

        <!--
            选择一个 table 来生成相关文件，可以有一个或多个 table，必须要有 table 元素
            选择的 table 会生成以下文件：
            1，SQL map 文件
            2，生成一个主键类；
            3，除了 BLOB 和主键的其他字段的类；
            4，包含 BLOB 的类；
            5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
            6，Mapper 接口（可选）

            tableName（必要）：要生成对象的表名；
            注意：大小写敏感问题。正常情况下，MBG 会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG 会
                根据设置的 schema，catalog 或 tablename 去查询数据表，按照下面的流程：
                1，如果 schema，catalog 或 tablename 中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                2，否则，如果数据库的标识符使用大写的，那么 MBG 自动把表名变成大写再查找；
                3，否则，如果数据库的标识符使用小写的，那么 MBG 自动把表名变成小写再查找；
                4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置 delimitIdentifiers="true" 即可保留大小写格式；

            可选：
            1，schema：数据库的 schema；
            2，catalog：数据库的 catalog；
            3，alias：为数据表设置的别名，如果设置了 alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的 domain 类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5，enableInsert（默认 true）：指定是否生成 insert 语句；
            6，enableSelectByPrimaryKey（默认 true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认 true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认 true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认 true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认 true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认 true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认 true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context 元素的 defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考 tableName 的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的 SQL 中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
         -->
        <table tableName="m_base_code" domainObjectName="BaseCode">
            <!--
               generatedKey用于生成生成主键的方法，
               如果设置了该元素，MBG会在生成的 <insert> 元素中生成一条正确的 <selectKey> 元素，该元素可选
               column:主键的列名；
               sqlStatement：要生成的 selectKey 语句，有以下可选项：
                   Cloudscape：相当于 selectKey 的 SQL 为： VALUES IDENTITY_VAL_LOCAL()
                   DB2       ：相当于 selectKey 的 SQL 为： VALUES IDENTITY_VAL_LOCAL()
                   DB2_MF    ：相当于 selectKey 的 SQL 为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                   Derby     ：相当于 selectKey 的 SQL 为：VALUES IDENTITY_VAL_LOCAL()
                   HSQLDB    ：相当于 selectKey 的 SQL 为：CALL IDENTITY()
                   Informix  ：相当于 selectKey 的 SQL 为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                   MySql     ：相当于 selectKey 的 SQL 为：SELECT LAST_INSERT_ID()
                   SqlServer ：相当于 selectKey 的 SQL 为：SELECT SCOPE_IDENTITY()
                   SYBASE    ：相当于 selectKey 的 SQL 为：SELECT @@IDENTITY
                   JDBC      ：相当于在生成的 insert 元素上添加 useGeneratedKeys="true" 和 keyProperty 属性
           -->
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
    </context>
</generatorConfiguration>