<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!-- 配置生成器 -->
<!--
    所有子元素及子元素的子元素均有严格顺序
    <properties> -> <classPathEntry> -> <context>(必须)
-->
<generatorConfiguration>
    <!--
        可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
        resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/folder/generatorConfig.properties
        url：配置资源加载地质，使用URL的方式，比如file:///C:/folder/generatorConfig.properties.
        注意，两个属性只能选址一个;

        另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml
        中使用<properties resource="" url="" />
    -->
    <properties resource="generator/generator.properties"/>

    <!--
        在MBG工作的时候，需要额外加载的依赖包location属性指明加载jar/zip包的全路径
        （可在Maven插件中配置）
        <classPathEntry location="D:/market-dao.jar" />
      -->

    <!--
      context:生成一组对象的环境
      id:必选，上下文id，用于在生成错误时提示
      defaultModelType:指定生成对象的样式
          1，conditional：默认值，类似hierarchical，若主键中只有一个字段，则合并到实体类中；
          2，flat：所有内容（主键，blob）等全部生成在一个对象中；
          3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
      targetRuntime:
          1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
          2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
      introspectedColumnImpl：指定扩展org.mybatis.generator.api.IntrospectedColumn该类的实现类
  -->
    <context id="demo" defaultModelType="flat" targetRuntime="tk.mybatis.mapper.generator.TkMyBatis3SimpleImpl">
        <!--
            自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
            一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
            <property name="autoDelimitKeywords" value="false" />
        -->
        <!--
            生成的Java文件的编码，默认与项目一致
            <property name="javaFileEncoding" value="UTF-8" />
        -->
        <!--
            格式化java代码
            <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
        -->
        <!--
            格式化XML代码
            <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
        -->

        <!-- 指明数据库的用于标记数据库对象名的符号 -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 生成实体类中的序列化属性 -->
        <plugin type="com.github.trang.mybatis.generator.plugins.SerializablePlugin">
            <property name="suppressJavaInterface" value="false"/>
        </plugin>
        <!-- 通用 Mapper 插件 -->
        <plugin type="com.github.trang.mybatis.generator.plugins.MapperPlugin">
            <property name="mappers" value="${base.mapper}"/>
            <property name="lombok" value="${lombok.type}"/>
            <property name="forceAnnotation" value="${force.annotation}"/>
        </plugin>
        <!-- 生成实体类中的 toString() 方法 -->
        <plugin type="com.github.trang.mybatis.generator.plugins.GuavaToStringPlugin"/>
        <!-- 生成 Mapper.xml 文件的 BaseColumns -->
        <plugin type="com.github.trang.mybatis.generator.plugins.MapperSqlMapConfigPlugin"/>
        <!-- 生成 Service 类 -->
        <plugin type="com.github.trang.mybatis.generator.plugins.ServicePlugin">
            <property name="baseService" value="${base.service}"/>
            <property name="baseServiceImpl" value="${base.service.impl}"/>
            <property name="targetProject" value="${target.project.service}"/>
            <property name="targetPackage" value="${target.package.service}"/>
        </plugin>

        <!-- 读取数据库表的注释，生成 Model 的注释 -->
        <commentGenerator type="com.github.trang.mybatis.generator.plugins.CommentGenerator"/>

        <!-- 连接数据库配置 -->
        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.url}"
                        userId="${jdbc.user}" password="${jdbc.password}"/>

        <!--
            java类型处理器
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
            注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--
            java model创建器，是必须要的元素
            负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <javaModelGenerator targetPackage="${target.package.model}" targetProject="${target.project.model}">
            <!-- 默认使用setter方式入参，为true则构造方法入参 -->
            <property name="constructorBased" value="false"/>
            <!-- 为true则根据catalog和schema生成子包 -->
            <property name="enableSubPackages" value="false"/>
            <!-- 为true则只能使用构造方法入参 -->
            <property name="immutable" value="false"/>
            <!--
                所有model的父类，MBG不会覆盖与父类中完全匹配的属性
                匹配规则：
                    1，属性名完全相同
                    2，属性类型完全相同
                    3，getter、setter方法完全相同
            -->
            <!--<property name="rootClass" value="${root.class.path}"/>-->
            <!--
                为true则生成类似代码
                this.username = username == null ? null : username.trim();
            -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 设置生成的xml文件，属性与javaModelGenerator一致 -->
        <sqlMapGenerator targetPackage="${target.package.xml}" targetProject="${target.project.xml}"/>

        <!--
            设置生成的dao类
            type：
                1，ANNOTATEDMAPPER：基于注解的Mapper接口，没有xml文件
                2，MIXEDMAPPER：XML与注解混合（SqlProvider注解方法会被XML替代）
                3，XMLMAPPER：所有方法均生成在xml文件中
            MyBatis3Simple没有MIXEDMAPPER
        -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${target.package.mapper}"
                             targetProject="${target.project.mapper}"/>

        <!--
            选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            选择的table会生成以下文件：
            1，SQL map文件
            2，生成一个主键类；
            3，除了BLOB和主键的其他字段的类；
            4，包含BLOB的类；
            5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
            6，Mapper接口（可选）

            tableName（必要）：要生成对象的表名；
            注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

            可选：
            1，schema：数据库的schema；
            2，catalog：数据库的catalog；
            3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5，enableInsert（默认true）：指定是否生成insert语句；
            6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context元素的defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
         -->
        <table tableName="m_base_code" domainObjectName="BaseCode">
            <!--
               generatedKey用于生成生成主键的方法，
               如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
               column:主键的列名；
               sqlStatement：要生成的selectKey语句，有以下可选项：
                   Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                   DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                   DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                   Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                   HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
                   Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                   MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                   SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                   SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
                   JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
           -->
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
    </context>
</generatorConfiguration>